// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/djokcik/praktikum-go-devops/internal/server/storage/model"
	mock "github.com/stretchr/testify/mock"

	server "github.com/djokcik/praktikum-go-devops/internal/server"

	storage "github.com/djokcik/praktikum-go-devops/internal/server/storage"

	sync "sync"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Configure provides a mock function with given fields: ctx, wg, db, cfg
func (_m *Repository) Configure(ctx context.Context, wg *sync.WaitGroup, db *model.Database, cfg server.Config) {
	_m.Called(ctx, wg, db, cfg)
}

// Get provides a mock function with given fields: ctx, filter
func (_m *Repository) Get(ctx context.Context, filter *storage.GetRepositoryFilter) (interface{}, error) {
	ret := _m.Called(ctx, filter)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, *storage.GetRepositoryFilter) interface{}); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *storage.GetRepositoryFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, filter
func (_m *Repository) List(ctx context.Context, filter *storage.ListRepositoryFilter) (interface{}, error) {
	ret := _m.Called(ctx, filter)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, *storage.ListRepositoryFilter) interface{}); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *storage.ListRepositoryFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, entity
func (_m *Repository) Update(ctx context.Context, id interface{}, entity interface{}) (bool, error) {
	ret := _m.Called(ctx, id, entity)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) bool); ok {
		r0 = rf(ctx, id, entity)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}) error); ok {
		r1 = rf(ctx, id, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
