// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	storage "github.com/djokcik/praktikum-go-devops/internal/server/storage"
	mock "github.com/stretchr/testify/mock"
)

// MetricRepository is an autogenerated mock type for the MetricRepository type
type MetricRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, filter
func (_m *MetricRepository) Get(ctx context.Context, filter storage.GetRepositoryFilter) (interface{}, error) {
	ret := _m.Called(ctx, filter)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, storage.GetRepositoryFilter) interface{}); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, storage.GetRepositoryFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, filter
func (_m *MetricRepository) List(ctx context.Context, filter storage.ListRepositoryFilter) (interface{}, error) {
	ret := _m.Called(ctx, filter)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, storage.ListRepositoryFilter) interface{}); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, storage.ListRepositoryFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, name, entity
func (_m *MetricRepository) Update(ctx context.Context, name string, entity interface{}) (bool, error) {
	ret := _m.Called(ctx, name, entity)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) bool); ok {
		r0 = rf(ctx, name, entity)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, name, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
