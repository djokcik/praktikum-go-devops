// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	metric "github.com/djokcik/praktikum-go-devops/internal/metric"
	mock "github.com/stretchr/testify/mock"
)

// HashService is an autogenerated mock type for the HashService type
type HashService struct {
	mock.Mock
}

// GetCounterHash provides a mock function with given fields: ctx, name, value
func (_m *HashService) GetCounterHash(ctx context.Context, name string, value metric.Counter) string {
	ret := _m.Called(ctx, name, value)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, metric.Counter) string); ok {
		r0 = rf(ctx, name, value)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetGaugeHash provides a mock function with given fields: ctx, name, value
func (_m *HashService) GetGaugeHash(ctx context.Context, name string, value metric.Gauge) string {
	ret := _m.Called(ctx, name, value)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, metric.Gauge) string); ok {
		r0 = rf(ctx, name, value)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetHash provides a mock function with given fields: ctx, str
func (_m *HashService) GetHash(ctx context.Context, str string) string {
	ret := _m.Called(ctx, str)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, str)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Verify provides a mock function with given fields: ctx, expectedHash, actualHash
func (_m *HashService) Verify(ctx context.Context, expectedHash string, actualHash string) bool {
	ret := _m.Called(ctx, expectedHash, actualHash)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, expectedHash, actualHash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
