// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	hash "hash"

	io "io"

	metric "github.com/djokcik/praktikum-go-devops/internal/metric"

	mock "github.com/stretchr/testify/mock"

	rsa "crypto/rsa"
)

// HashService is an autogenerated mock type for the HashService type
type HashService struct {
	mock.Mock
}

// DecryptOAEP provides a mock function with given fields: _a0, random, private, msg, label
func (_m *HashService) DecryptOAEP(_a0 hash.Hash, random io.Reader, private *rsa.PrivateKey, msg []byte, label []byte) ([]byte, error) {
	ret := _m.Called(_a0, random, private, msg, label)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(hash.Hash, io.Reader, *rsa.PrivateKey, []byte, []byte) []byte); ok {
		r0 = rf(_a0, random, private, msg, label)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(hash.Hash, io.Reader, *rsa.PrivateKey, []byte, []byte) error); ok {
		r1 = rf(_a0, random, private, msg, label)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncryptOAEP provides a mock function with given fields: _a0, random, public, msg, label
func (_m *HashService) EncryptOAEP(_a0 hash.Hash, random io.Reader, public *rsa.PublicKey, msg []byte, label []byte) ([]byte, error) {
	ret := _m.Called(_a0, random, public, msg, label)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(hash.Hash, io.Reader, *rsa.PublicKey, []byte, []byte) []byte); ok {
		r0 = rf(_a0, random, public, msg, label)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(hash.Hash, io.Reader, *rsa.PublicKey, []byte, []byte) error); ok {
		r1 = rf(_a0, random, public, msg, label)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCounterHash provides a mock function with given fields: ctx, name, value
func (_m *HashService) GetCounterHash(ctx context.Context, name string, value metric.Counter) string {
	ret := _m.Called(ctx, name, value)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, metric.Counter) string); ok {
		r0 = rf(ctx, name, value)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetGaugeHash provides a mock function with given fields: ctx, name, value
func (_m *HashService) GetGaugeHash(ctx context.Context, name string, value metric.Gauge) string {
	ret := _m.Called(ctx, name, value)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, metric.Gauge) string); ok {
		r0 = rf(ctx, name, value)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetHash provides a mock function with given fields: ctx, str
func (_m *HashService) GetHash(ctx context.Context, str string) string {
	ret := _m.Called(ctx, str)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, str)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Verify provides a mock function with given fields: ctx, expectedHash, actualHash
func (_m *HashService) Verify(ctx context.Context, expectedHash string, actualHash string) bool {
	ret := _m.Called(ctx, expectedHash, actualHash)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, expectedHash, actualHash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
